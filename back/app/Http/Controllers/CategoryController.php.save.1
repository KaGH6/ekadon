<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\Category;
use App\Models\Card;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class CategoryController extends Controller {
    // 全てのカテゴリーを取得
    public function index() {
        // $categories = Category::all();
        // // echo $categories;
	$userId = $request->user()->id;
	$categories = Category::where('user_id', $userId)->get();

        // カテゴリーのリストをJSON形式で返す
        return response()->json($categories);
    }

    // カテゴリー作成
    public function store(Request $request) {
        $validated = $request->validate([
            'name' => 'required|string|max:30',
            // 'category_img' => 'required|string|url|max:255',
            // 'category_img' => 'required|string|max:255',
            'category_img' => 'required|file|mimes:jpg,jpeg,png,svg,gif|max:2048',
            // 'user_id' => 'required|integer|exists:users,id',
        ]);

        // 画像ファイルの保存
        if ($request->hasFile('category_img')) {
           // $path = $request->file('category_img')->store('images/category_imgs', 'public');
           // $validated['category_img'] = asset('storage/' . $path);
	   // $validated['category_img'] = $this->saveCategoryImage($request->file('category_img'));

	   // $path = $request->file('category_img')->store('category_imgs', 's3');
           // $validated['category_img'] = Storage::disk('s3')->url($path);
	   $validated['category_img'] = $this->saveCategoryImage($request->file('category_img'));
        }

        // ログイン中のユーザーIDを使う
        $validated['user_id'] = $request->user()->id;
        // $validated['user_id'] = 1; //操作確認用の仮のID

        // バリデーションを通過したデータで新しいカテゴリーを作成
        $category = Category::create($validated);

        // 作成したカテゴリーをJSON形式で返す
        return response()->json($category, 201);
    }

    // カテゴリー取得（ID指定）
    public function show(string $id) {
        // // IDでカテゴリーを検索（見つからなければ404）
        // $category = Category::findOrFail($id);

	$userId = $request->user()->id;
$category = Category::where('id', $id)->where('user_id', $userId)->firstOrFail();

        // 見つかったカテゴリーをJSON形式で返す
        return response()->json($category);
    }

    // 指定されたカテゴリーに属するカードを取得
    public function cardsByCategory($id) {
        $cards = Card::where('category_id', $id)->get();
        return response()->json($cards);
    }

    // カテゴリー編集
    public function update(Request $request, string $id) {
        // 対象のカテゴリーを取得（なければ404）
        $category = Category::findOrFail($id);

        // バリデーション
        $validated = $request->validate([
            'name' => 'sometimes|required|string|max:30',
            'category_img' => 'sometimes|file|mimes:jpg,jpeg,png,svg,gif|max:2048',
            'user_id' => 'sometimes|required|integer|exists:users,id',
        ]);

        // 画像ファイルが送信されていれば保存
        if ($request->hasFile('category_img')) {
           // $path = $request->file('category_img')->store('images/category_imgs', 'public');
           // $validated['category_img'] = asset('storage/' . $path);
	   //  $validated['category_img'] = $this->saveCategoryImage($request->file('category_img'));
	   // 古い画像を削除
           if ($category->category_img) {
               $this->deleteCategoryImage($category->category_img);
           }
	   // 新しい画像を保存
           $validated['category_img'] = $this->saveCategoryImage($request->file('category_img'));
        }

        // 更新
        $category->update($validated);

        // 結果を返す
        return response()->json($category);
    }

    // カテゴリー削除
    public function destroy(string $id) {
        // 対象カテゴリー取得（なければ404）
        $category = Category::findOrFail($id);

        // カテゴリー画像が存在する場合は削除
        if ($category->category_img) {
            // 画像URLから "storage/" を除いたパスを抽出
           // $relativePath = str_replace(asset('storage') . '/', '', $category->category_img);
           // Storage::disk('public')->delete($relativePath);
	   $this->deleteCategoryImage($category->category_img);
        }

        // 削除実行
        $category->delete();

        // レスポンス
        return response()->json(['message' => 'カテゴリーを削除しました。']);
    }

	// 画像保存：S3にアップロードしてURLを返す 
    private function saveCategoryImage($file)
    {
        $path = $file->store('category_imgs', 's3');
        return Storage::disk('s3')->url($path);
    }

    // 画像削除：S3のURLからパスを抽出して削除
    private function deleteCategoryImage($imageUrl)
    {
        $disk = 's3';
        $bucketUrl = Storage::disk($disk)->url('');
	$relativePath = str_replace($bucketUrl, '', $imageUrl); // パス部分だけにする
        Storage::disk($disk)->delete($relativePath);

        // デバッグログ
        \Log::info('S3画像削除: ' . $relativePath);
    }
}
